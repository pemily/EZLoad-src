// https://cs.lmu.edu/~ray/notes/javacc/
// https://programmersought.com/article/51626165921/
// https://www.codeproject.com/Articles/35748/An-Introduction-to-JavaCC
// https://netbeans.apache.org/tutorials/nbm-javacc-parser.html
options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = true;
  STATIC = false;
  COMMON_TOKEN_ACTION = false;
  JDK_VERSION = "1.8";
  BUILD_NODE_FILES=true;
  MULTI = true; // many class names
  NODE_PREFIX = "BD_"; // Prefix for generated AST classes, BD == BourseDirect
  VISITOR=true; // generate the visitor classes
  // VISITOR_DATA_TYPE="com.pascal.bientotrentier.bourseDirect.transform.VisitorContext";
  // VISITOR_RETURN_TYPE="com.pascal.bientotrentier.bourseDirect.transform.VisitorContext";
  VISITOR_EXCEPTION="";
}
PARSER_BEGIN(BourseDirectParser)

package com.pascal.bientotrentier.parsers.bourseDirect;

public class BourseDirectParser {
    public static void uselessMethod(){
        // I created this method, just because the syntax highlighter of intellij do not want an empty class
    }
}

PARSER_END (BourseDirectParser)

SKIP : {
  " " | "\t" | "\n" | "\r"
}

TOKEN : {
         <AVIS_DOPERATION: "Avis d'Opération">
       | <COMPTE: "COMPTE N°">
       | <QUELQUECHOSE: "DEIMPROBABLEQUIARRIVERAJAMAISJUSTEPOUREXEMPLE"> : EXAMPLE_BLOC
       | <WORD: (["A"-"Z","a"-"z"])+>
       | <DATE_HEADER : "Date">
       | <DESIGNATION_HEADER : "Désignation">
       | <DEBIT_HEADER : "Débit">
       | <CREDIT_HEADER : "Crédit">
       | <AMOUNT:  ["0"-"9"](["0"-"9"," "])*(","(["0"-"9"])+)?>
       | <DEVISE:  ("€"|"$"|"EUR"|"USD")>
       | <DATE: ["0"-"9"]["0"-"9"]"/"["0"-"9"]["0"-"9"]"/20"["0"-"2"]["0"-"9"]>
       | <ACCOUNT_NUMBER: (["A"-"Z","0"-"9"])+>
}

<EXAMPLE_BLOC>
TOKEN : {
    <EXAMPLE_TOKEN:  ["\n","\r"] (~["\n","\r"])+ > : DEFAULT
}

SimpleNode account() :
{ Token num, type; }{
    <AVIS_DOPERATION>
    <COMPTE> num=<ACCOUNT_NUMBER> type=<WORD>
    {
         jjtThis.value=new String[]{num.image, type.image};
    }
    { return jjtThis; }
}

SimpleNode dataset() :
{}
{
    // TODO
    { return jjtThis; }
}
